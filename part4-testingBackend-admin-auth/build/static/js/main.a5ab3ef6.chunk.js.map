{"version":3,"sources":["components/Note.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setMessage","baseUrl","useEffect","axios","get","then","res","data","notesToShow","filter","toggleImportanceOf","id","find","n","changedNote","newObject","put","update","returnedNote","map","setTimeout","catch","error","key","date","onSubmit","event","preventDefault","noteObject","Date","Math","random","post","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"mNAeeA,EAbF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,0BACA,oBAEJ,OACE,wBAAIC,UAAU,QACXJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,K,gBC8FpCK,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EAEK,KAGF,yBAAKJ,UAAU,SAASI,IAG3BC,EAAS,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,kBACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uGAOSC,EA9HH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,8BAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIcN,mBAAS,MAJvB,mBAITP,EAJS,KAIAc,EAJA,KAMVC,EAAU,6DAUhBC,qBACE,kBACEC,IAAMC,IAAIH,GAASI,MAAK,SAACC,GACvBX,EAASW,EAAIC,WAEjB,IAGF,IAAMC,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAC/B,GAAD,OAA6B,IAAnBA,EAAKG,aAwB1B6B,EAAqB,SAACC,GAC1B,IAAMjC,EAAOgB,EAAMkB,MAAK,SAACC,GAAD,OAAOA,EAAEF,KAAOA,KAClCG,EAAW,eAAQpC,EAAR,CAAcG,WAAYH,EAAKG,aAxCnC,SAAC8B,EAAII,GAClB,OAAOZ,IAAMa,IAAN,UAAaf,EAAb,YAAwBU,GAAMI,GAAWV,MAAK,SAACC,GAAD,OAASA,EAAIC,SAyClEU,CAAON,EAAIG,GACRT,MAAK,SAACa,GACLvB,EAASD,EAAMyB,KAAI,SAACzC,GAAD,OAAWA,EAAKiC,KAAOA,EAAKjC,EAAOwC,MACtDlB,EAAW,gBACXoB,YAAW,WACTpB,EAAW,QACV,QAEJqB,OAAM,SAACC,GACNtB,EAAW,SAAD,OAAUtB,EAAKK,QAAf,sCACVqC,YAAW,WACTpB,EAAW,QACV,KACHL,EAASD,EAAMe,QAAO,SAACI,GAAD,OAAOA,EAAEF,KAAOA,UAI5C,OACE,6BACE,qCACA,kBAAC,EAAD,CAAczB,QAASA,IACvB,6BACE,4BAAQF,QAAS,kBAAMe,GAAYD,KAAnC,QACQA,EAAU,4BAA8B,cAGlD,4BACGU,EAAYW,KAAI,SAACzC,GAAD,OACf,kBAAC,EAAD,CACE6C,IAAK7C,EAAK8C,KACV9C,KAAMA,EACNC,iBAAkB,kBAAM+B,EAAmBhC,EAAKiC,WAItD,0BAAMc,SA7DM,SAACC,GACfA,EAAMC,iBACN,IAtBcZ,EAsBRa,EAAa,CACjB7C,QAASa,EACT4B,KAAM,IAAIK,KACVhD,UAAWiD,KAAKC,SAAW,KAzBfhB,EA4BPa,EA3BAzB,IAAM6B,KAAK/B,EAASc,GAAWV,MAAK,SAACC,GAAD,OAASA,EAAIC,SA2BrCF,MAAK,SAACa,GACvBvB,EAASD,EAAMuC,OAAOf,IACtBlB,EAAW,gBACXoB,YAAW,WACTpB,EAAW,QACV,KACHH,EAAW,SAgDT,2BACE,2BAAOqC,MAAOtC,EAASuC,SA7CN,SAACT,GACxB7B,EAAW6B,EAAMU,OAAOF,WA8CpB,4BAAQG,KAAK,UAAb,cAEF,kBAAC,EAAD,Q,MC9FNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a5ab3ef6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? \"Turn Into Not Important\"\r\n    : \"Make it Important\";\r\n\r\n  return (\r\n    <li className=\"note\">\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport axios from \"axios\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]); //array containing all notes\r\n  const [newNote, setNewNote] = useState(\"A certain magical new note\"); //stores the content field of a new note\r\n  const [showAll, setShowAll] = useState(true); //whether we will display all notes or not\r\n  const [message, setMessage] = useState(null);\r\n\r\n  const baseUrl = \"https://fullstackopen-part3-mateus.herokuapp.com/api/notes\";\r\n\r\n  const create = (newObject) => {\r\n    return axios.post(baseUrl, newObject).then((res) => res.data); //returns the created object if everything worked\r\n  };\r\n\r\n  const update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject).then((res) => res.data);\r\n  };\r\n\r\n  useEffect(\r\n    () =>\r\n      axios.get(baseUrl).then((res) => {\r\n        setNotes(res.data);\r\n      }),\r\n    []\r\n  );\r\n\r\n  const notesToShow = showAll //array com as notas que serÃ£o mostradas, default todas\r\n    ? notes //if showAll is true, show all...\r\n    : notes.filter((note) => note.important === true); //otherwise only show the notes marked as important\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault(); //prevents page from refreshing after submit\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date(),\r\n      important: Math.random() > 0.5, //half in average will be set as important randomly\r\n    };\r\n\r\n    create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote));\r\n      setMessage(`Note created`);\r\n      setTimeout(() => {\r\n        setMessage(null); //after 5s remove error msg\r\n      }, 5000);\r\n      setNewNote(\"\");\r\n    });\r\n  }; //fim addNote\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value); //as input is typed, we update the view and the value of newNote\r\n  };\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id); //this holds the value of the note we are looking for\r\n    const changedNote = { ...note, important: !note.important }; //this flips its importance\r\n\r\n    update(id, changedNote) //update note on backend\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)));\r\n        setMessage(`Note updated`);\r\n        setTimeout(() => {\r\n          setMessage(null);\r\n        }, 5000);\r\n      })\r\n      .catch((error) => {\r\n        setMessage(`Note '${note.content}' was already removed from server`);\r\n        setTimeout(() => {\r\n          setMessage(null); //after 5s remove error msg\r\n        }, 5000);\r\n        setNotes(notes.filter((n) => n.id !== id)); //remove note from view since it's already removed\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <Notification message={message} />\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          Show {showAll ? \"Only VERY Important Notes\" : \"All Notes\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.date}\r\n            note={note}\r\n            toggleImportance={() => toggleImportanceOf(note.id)}\r\n          />\r\n        ))}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <p>\r\n          <input value={newNote} onChange={handleNoteChange} />\r\n        </p>\r\n        <button type=\"submit\">Save Note</button>\r\n      </form>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    //if message prop is null, nothing is rendered\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"rgb(29, 1, 107)\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 18,\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2020\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}