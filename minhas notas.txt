me parece que é melhor ter qualquer funcao e operacao fora do JSX (fora do return (<div> </div>), dentro da função que contém o JSX.

Defina componentes reutilizáveis e mande o que eles precisam como  props. <UmCertoComponente data={var1} func={func1} />
const UmCertoComponente = (props) => {
const {var1, func1} = props

const t = [1,2,3,4,5]
const [first,second,...rest] = t
console.log(first,second,rest) //1 2 [3,4,5]


const [notes, setNotes] = useState(props.notes)
const [newNote, setNewNote] = useState('new note')
const handleNoteChange = (event) => {
    console.log(event.target.value)
    setNewNote(event.target.value)
}
<input value={newNote} onChange={handleNoteChange} />


const array1 = [5,12,8,130,44];
const found = array1.find(x => x > 10); //12


axios.get(url).then(res => setVar(res.data))

const update = (id, newObject) => {
return axios.put(`${baseUrl}/${id}`, newObject)
  .then(res => res.data)

//o put retorna a nota modificada, entao vc precisa
update(id, changedNote)
  .then(returnedNote => {
    setNotes(notes.map(note => note.id !== id ? note : returnedNote))
  })


----deploy----
((backend))
npm install cors --save
const cors = require('cors')
app.use(cors())
const PORT = process.env.PORT || 3001
const connectString = process.env.MONGODB_URI
((add Procfile))
web: node index.js
((terminal))
heroku login
heroku create nomeDaApp
heroku config:set MONGODB_URI='mongodb+srv etcetc'
git init
git add .
git commit -am "deploying"
git push heroku master
heroku logs --tail
heroku open nomeDaApp
((frontend))
mude o patch de fetch/axios etc para /api/resource ou o que for apropriado
npm run build
copie /build/ pra folder do backend
((backend))
app.use(express.static('build'))
git add commit etc
git push heroku master
-------------


----express----
require('dotenv').config()
const express = require('express')
const resourceRoute = require('./routes/resource')
const app = express()
app.use(express.json()) //req.body
const requestLogger = (req, res, next) => {
    //middleware que sempre é executado
    console.log("Method:", req.method);
    console.log("Path:  ", req.path);
    console.log("Body:  ", req.body);
    console.log("---");
    next(); //passa o controle para o próximo middleware, todo middleware custom que não retorne uma resposta deve terminar com next();
};
app.use(requestLogger);
app.use(resourceRoute)
const unknownEndpoint = (req,res) => {
  res.status(404).send({error: 'unknown endpoint!'});
}
app.use(unknownEndpoint)
const PORT = process.env.PORT || 3000
app.listen(PORT, () => console.log(`Server listening on ${PORT}`))
------------